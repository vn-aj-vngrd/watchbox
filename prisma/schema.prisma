generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "cockroachdb"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Box {
    id         String      @id @default(cuid())
    userId     String
    boxTitle   String
    boxLink    String
    created_at DateTime    @default(now())
    updated_at DateTime    @default(now())
    Component  Component[]
    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Component {
    id            String   @id @default(cuid())
    boxId         String
    componentName String
    xAxis         Int
    yAxis         Int
    Entry         Entry[]
    created_at    DateTime @default(now())
    updated_at    DateTime @default(now())
    box           Box      @relation(fields: [boxId], references: [id], onDelete: Cascade)
}

model Entry {
    id          String    @id @default(cuid())
    componentId String
    entryTitle  String
    note        String
    review      String
    rating      Int
    created_at  DateTime  @default(now())
    updated_at  DateTime  @default(now())
    component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
}

model Pin {
    id         String   @id @default(cuid())
    userId     String
    pinnedId   String
    created_at DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Box           Box[]
    created_at    DateTime  @default(now())
    updated_at    DateTime  @default(now())
    Pin           Pin[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
